import requests
from bs4 import BeautifulSoup
import datetime
import re
from urllib.parse import quote

def get_image_and_title(item_name):
    api_key = "AIzaSyAWwMT-J8DFkdh6B8k_yjBxKXSfENNfjOM"
    search_engine_id = "e440b00f82add4f0c"  
    
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "q": item_name,
        "cx": search_engine_id,
        "key": api_key,
        "searchType": "image",
        "num": 1
    }

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()

        if "items" in data:
            raw_title = data["items"][0]["title"]
            # Improved cleaning with proper word boundary handling
            clean_title = re.sub(
                r'\b(Amazon|eBay|Walmart|\.com|Optimal|Bundle|Gut Health|Probiotic)\b|[:\-\+]', 
                '', 
                raw_title, 
                flags=re.IGNORECASE
            )
            clean_title = re.sub(r'\s{2,}', ' ', clean_title).strip()
            return clean_title, data["items"][0]["link"]
        else:
            return "❌ No item found.", ""

    except requests.exceptions.RequestException as e:
        return f"🚨 API Error: {e}", ""

def get_ebay_link(search_term):
    """Generate focused eBay search URL"""
    # Keep only essential search terms
    base_terms = "60 billion probiotic"
    clean_terms = re.sub(r'\b(60|billion|probiotic)\b', '', search_term, flags=re.I)
    combined = f"{base_terms} {clean_terms}".strip()
    return f"https://www.ebay.com/sch/i.html?_nkw={quote(combined)}&_sop=12"

def parse_ebay_listings(html):
    """Modern eBay listing parser with improved selectors"""
    soup = BeautifulSoup(html, 'html.parser')
    results = []

    # Find all product cards
    listings = soup.find_all('div', {'class': 's-item__wrapper'})

    for item in listings:
        # Skip sponsored items and headers
        if 's-item__sep' in item.get('class', []):
            continue

        # Extract details with error handling
        try:
            name = item.find('span', {'role': 'heading'}).text.strip()
            price = item.find('span', {'class': 's-item__price'}).text.strip()
            sales = item.find('span', {'class': 's-item__hotness'})
            sales = sales.text.strip() if sales else 'N/A'
            rating = item.find('div', {'class': 'x-star-rating'})
            rating = rating.find('span').text.strip() if rating else 'N/A'
            image = item.find('img', {'src': True})['src']
            
            results.append({
                'name': name,
                'price': price,
                'sales': sales,
                'rating': rating,
                'image': image
            })
        except AttributeError:
            continue

    return results

def get_relevant_listing(listings, original_query):
    """Find the most relevant listing using multiple criteria"""
    if not listings:
        return None

    # Score listings based on matches
    scored = []
    for listing in listings:
        score = 0
        name = listing['name'].lower()

        # Basic keyword matching
        score += 2 if '60' in name and 'billion' in name else 0
        score += 1 if 'probiotic' in name else 0
        score += 1 if 'physician' in name else 0

        # Price validation
        if '$' in listing['price']:
            score += 1

        scored.append((score, listing))

    # Sort by score in descending order
    scored.sort(key=lambda x: x[0], reverse=True)

    return scored[0][1] if scored and scored[0][0] > 0 else None

def get_sales_data(url):
    scraperapi_key = "8b00c3f9b6a8f5e096dc1209fea42cbb"
    scraper_url = f"https://api.scraperapi.com/?api_key={scraperapi_key}&url={url}"
    
    try:
        response = requests.get(scraper_url, timeout=15)
        if response.status_code == 200:
            listings = parse_ebay_listings(response.text)
            best_listing = get_relevant_listing(listings, "60 billion probiotic")
            
            if best_listing:
                return {
                    "product": best_listing['name'],
                    "price": best_listing['price'],
                    "sales_rank": best_listing['sales'],
                    "rating": best_listing['rating'],
                    "date": datetime.date.today().strftime("%Y-%m-%d")
                }, best_listing['image']
            
        return {
            "product": "No relevant listings found",
            "price": "N/A",
            "sales_rank": "N/A",
            "rating": "N/A",
            "date": datetime.date.today().strftime("%Y-%m-%d")
        }, "No image"
        
    except Exception as e:
        return {
            "product": f"Error: {str(e)}",
            "price": "N/A",
            "sales_rank": "N/A",
            "rating": "N/A",
            "date": datetime.date.today().strftime("%Y-%m-%d")
        }, ""

def main():
    while True:
        item_name = input("\nInput item name (or type 'exit' to quit): ").strip()
        if item_name.lower() == 'exit':
            print("Exiting. Goodbye!")
            break

        # Get Google data
        title, google_image_url = get_image_and_title(item_name)
        print(f"\n🔍 Product Identification:")
        print(f"📛 Cleaned Title: {title}")
        print(f"🌄 Google Image: {google_image_url}")

        if "❌" not in title:
            # Get eBay data
            ebay_url = get_ebay_link(title)
            print(f"\n🛒 eBay Search:")
            print(f"🔗 {ebay_url}")
            
            ebay_data, ebay_image = get_sales_data(ebay_url)
            
            print("\n📈 Sales Data:")
            print(f"📦 Product: {ebay_data['product']}")
            print(f"💰 Price: {ebay_data['price']}")
            print(f"🚀 Sales: {ebay_data['sales_rank']}")
            print(f"⭐ Rating: {ebay_data['rating']}")
            print(f"📅 Date: {ebay_data['date']}")
            print(f"\n🖼️ Product Image: {ebay_image if ebay_image else 'No image found'}")

if __name__ == "__main__":
    main()
